class Solution {
public:
    vector<vector<int>> res;

    void backtrack(vector<int>& nums, vector<bool>& used, vector<int>& path)
    {
        if(path.size() == nums.size())
        {
            res.push_back(path);
            return;
        }
        for(int i=0; i<nums.size(); ++i)
        {
            if(!used[i])
            {
                path.push_back(nums[i]);
                used[i] = true;
                backtrack(nums, used, path);
                used[i] = false;
                path.pop_back();
            }
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<int> path;
        vector<bool> used(nums.size());
        backtrack(nums, used, path);
        return res;
    }
};
