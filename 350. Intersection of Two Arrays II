class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size())
        {
            return intersect(nums2, nums1);
        }

        unordered_map<int, int> map;
        for(int num : nums1)
        {
            ++map[num];
        }
        vector<int> intersection;
        for(int num : nums2)
        {
            if(map.count(num))
            {
                intersection.push_back(num);
                --map[num];
                if(map[num] == 0)
                {
                    map.erase(num);
                }
            }
        }
        return intersection;
    }
};










class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int len1 = nums1.size(), len2 = nums2.size();
        vector<int> intersection;
        int index1 = 0, index2 = 0;
        while(index1 < len1 && index2 < len2)
        {
            if(nums1[index1] < nums2[index2])
            {
                ++index1;
            }
            else if(nums1[index1] > nums2[index2])
            {
                ++index2;
            }
            else
            {
                intersection.push_back(nums1[index1]);
                ++index1;
                ++index2;
            }
        }
        return intersection;
    }
};
