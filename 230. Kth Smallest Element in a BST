class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> stack;
        while(root != nullptr || stack.size() > 0)
        {
            while(root != nullptr)
            {
                stack.push(root);
                root = root -> left;
            }
            root = stack.top();
            stack.pop();
            --k;
            if(k == 0)
            {
                break;
            }
            root = root->right;
        }
        return root->val;
    }
};










class MyBst{
public:
    MyBst(TreeNode* root){
        this->root = root;
        countNodeNum(root);
    }

    int kthSmallest(int k)
    {
        TreeNode* node = root;
        while(node != nullptr)
        {
            int left = getNodeNum(node->left);
            if(left < k-1)
            {
                node = node->right;
                k -= left+1;
            }
            else if(left == k-1)
            {
                break;
            }
            else{
                node = node->left;
            }
        }
        return node->val;
    }
private:
    TreeNode *root;
    unordered_map<TreeNode*, int> nodeNum;

    int countNodeNum(TreeNode* node)
    {
        if(node == nullptr)
        {
            return 0;
        }
        nodeNum[node] = 1 + countNodeNum(node->left) + countNodeNum(node->right);
        return nodeNum[node];
    }

    int getNodeNum(TreeNode* node)
    {
        if(node != nullptr && nodeNum.count(node))
        {
            return nodeNum[node];
        }
        else
        {
            return 0;
        }
    }
};

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        MyBst bst(root);
        return bst.kthSmallest(k);
    }
};
