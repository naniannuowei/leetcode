class Solution {
public:
    int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int rows, columns;

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size() == 0 || matrix[0].size() == 0)
        {
            return 0;
        }
        rows = matrix.size();
        columns = matrix[0].size();
        vector<vector<int>> memo(rows, vector<int> (columns));
        int ans = 0;
        for(int i=0; i<rows; ++i)
        {
            for(int j=0; j<columns; ++j)
            {
                ans = max(ans, dfs(matrix, i, j, memo));
            }
        }
        return ans;
    }

    int dfs(vector<vector<int>>& matrix, int row, int column, vector<vector<int>>& memo)
    {
        if(memo[row][column] != 0)
        {
            return memo[row][column];
        }
        ++memo[row][column];
        for(int i=0; i<4; ++i)
        {
            int newRow = row + dirs[i][0];
            int newColumn = column + dirs[i][1];
            if(newRow >= 0 && newRow < rows && newColumn >= 0 && newColumn < columns && matrix[newRow][newColumn] > matrix[row][column])
            {
                memo[row][column] = max(memo[row][column], dfs(matrix, newRow, newColumn, memo) + 1);
            }
        }
        return memo[row][column];

    }
};









class Solution {
public:
    int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int rows, columns;

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size() == 0 || matrix[0].size() == 0)
        {
            return 0;
        }
        rows = matrix.size();
        columns = matrix[0].size();
        vector<vector<int>> outdegrees(rows, vector<int> (columns));
        for(int i=0; i<rows; ++i)
        {
            for(int j=0; j<columns; ++j)
            {
                for(int k=0; k<4; ++k)
                {
                    int newRow = i + dirs[k][0], newColumn = j + dirs[k][1];
                    if(newRow >=0 && newRow < rows && newColumn >= 0 && newColumn < columns && matrix[newRow][newColumn] > matrix[i][j])
                    {
                        ++outdegrees[i][j];
                    }
                }
            }
        }
        queue<pair<int, int>> q;
        for(int i = 0; i<rows; ++i)
        {
            for(int j=0; j<columns; ++j)
            {
                if(outdegrees[i][j] == 0)
                {
                    q.push({i, j});
                }
            }
        }
        int ans = 0;
        while(!q.empty())
        {
            ++ans;
            int size = q.size();
            for(int i = 0; i<size; ++i)
            {
                auto cell = q.front(); q.pop();
                int row = cell.first, column = cell.second;
                for(int k=0; k<4; ++k)
                {
                    int newRow = row + dirs[k][0], newColumn = column + dirs[k][1];
                    if(newRow >= 0 && newRow < rows && newColumn >= 0 && newColumn < columns && matrix[newRow][newColumn] < matrix[row][column])
                    {
                        --outdegrees[newRow][newColumn];
                        if(outdegrees[newRow][newColumn] == 0)
                        {
                            q.push({newRow, newColumn});
                        }
                    }
                }
            }
        }
        return ans;
    }

};
